import type { Recipe, UserInput } from "../../types/recipe";
import { generateId } from "../storage/storageService";
import { AI_API_CONFIG, API_MESSAGES } from "../../constants/apiConfig";
import { generateLocalRecipe } from "../recipe/localRecipeService";

/**
 * Configura el prompt para la generaci√≥n de recetas
 */
const createRecipePrompt = (userInput: UserInput): string => {
  // Extraer informaci√≥n del formulario
  const { cuisineType, dietType, prepTime, difficultyLevel, electricityType } =
    userInput.preferences;
  const { allergies, preferences, otherRestrictions } =
    userInput.dietaryRestrictions;
  const ingredients = userInput.availableIngredients || [];

  // Determinar el mensaje de electricidad seg√∫n la selecci√≥n
  let electricityMessage = "";
  if (electricityType === "Sin electricidad") {
    electricityMessage =
      "IMPORTANTE: La receta debe poderse preparar SIN ELECTRICIDAD. No incluyas pasos que requieran electrodom√©sticos como licuadora, batidora, horno el√©ctrico, microondas o refrigerador. Usa √öNICAMENTE m√©todos de cocci√≥n que no requieran electricidad como fuego directo, parrilla a gas o preferiblemente carb√≥n.";
  } else {
    electricityMessage =
      "Puedes incluir cualquier m√©todo de cocci√≥n o electrodom√©stico en la preparaci√≥n.";
  }

  // Construir prompt estructurado
  return `Crea una receta de cocina en espa√±ol con estas caracter√≠sticas:
  
TIPO DE COMIDA: ${cuisineType}
DIETA: ${dietType}
TIEMPO DE PREPARACI√ìN: ${prepTime}
NIVEL DE DIFICULTAD: ${difficultyLevel}
DISPONIBILIDAD DE ELECTRICIDAD: ${electricityType}
${allergies.length > 0 ? `ALERGIAS A EVITAR: ${allergies.join(", ")}` : ""}
${
  preferences.length > 0
    ? `PREFERENCIAS ADICIONALES: ${preferences.join(", ")}`
    : ""
}
${otherRestrictions ? `OTRAS RESTRICCIONES: ${otherRestrictions}` : ""}
${
  ingredients.length > 0
    ? `INGREDIENTES DISPONIBLES: ${ingredients.join(", ")}`
    : ""
}

${electricityMessage}

La respuesta debe estar en formato JSON con esta estructura exacta:
{
  "title": "T√≠tulo de la receta",
  "ingredients": [
    {"name": "nombre del ingrediente", "quantity": "cantidad", "unit": "unidad de medida"}
  ],
  "instructions": ["Paso 1", "Paso 2", "..."],
  "prepTime": "tiempo de preparaci√≥n en minutos",
  "difficultyLevel": "nivel de dificultad",
  "cuisineType": "tipo de cocina",
  "dietType": "tipo de dieta"
}`;
};

/**
 * Genera una receta utilizando OpenRouter API (sustituyendo DeepSeek)
 */
export const generateRecipeWithDeepSeek = async (
  userInput: UserInput
): Promise<Recipe> => {
  try {
    // Verificar si hay una API key configurada
    const apiKey = import.meta.env.DEEPSEEK_API_KEY;

    if (!apiKey) {
      console.warn(
        "‚ö†Ô∏è No se encontr√≥ API key para OpenRouter, usando fallback local"
      );
      return generateLocalRecipe(userInput);
    }

    console.log("üîç Generando receta con DeepSeek a trav√©s de OpenRouter...");
    console.log("üîó Usando endpoint:", AI_API_CONFIG.DEEPSEEK.API_URL);
    console.log("üîß Modelo: ", AI_API_CONFIG.DEEPSEEK.MODEL);

    // Crear el prompt para la IA
    const prompt = createRecipePrompt(userInput);
    console.log("üìù Prompt generado:", prompt);

    // Formatear la clave API correctamente (4 primeros caracteres para el log)
    const apiKeyPrefix = apiKey.substring(0, 4);
    console.log(`üîë Usando API Key con prefijo: ${apiKeyPrefix}...`);

    // Configurar la solicitud
    const response = await fetch(AI_API_CONFIG.DEEPSEEK.API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
        "HTTP-Referer": "https://vitaspoon.com", // Requerido por OpenRouter
        "X-Title": "VitaSpoon Recipe Generator", // Recomendado por OpenRouter
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-chat", // Modelo DeepSeek a trav√©s de OpenRouter
        messages: [
          {
            role: "system",
            content:
              "Eres un chef experto que crea recetas detalladas en espa√±ol. Adapta tus recetas seg√∫n la disponibilidad de electricidad indicada por el usuario. Si no hay electricidad, NO incluyas pasos que requieran electrodom√©sticos (licuadora, horno el√©ctrico, microondas, fogones el√©ctricos, etc.) y usa m√©todos como parrilla con carbon o cocina a gas. Respondes exclusivamente en formato JSON puro sin delimitadores markdown como ```json o ```.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
        max_tokens: AI_API_CONFIG.DEEPSEEK.MAX_TOKENS,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `‚ùå Error de API OpenRouter: ${response.status}`,
        errorText
      );
      throw new Error(
        `Error de OpenRouter API: ${response.status} - ${errorText}`
      );
    }

    const data = await response.json();
    console.log("‚úÖ Respuesta recibida de DeepSeek a trav√©s de OpenRouter");

    const recipeJSON = data.choices[0].message.content;

    // Intentar parsear la respuesta JSON
    try {
      // Extraer el JSON de la respuesta (puede venir envuelto en markdown o texto)
      const jsonMatch =
        recipeJSON.match(/```json\s*([\s\S]*?)\s*```/) ||
        recipeJSON.match(/```\s*([\s\S]*?)\s*```/) ||
        recipeJSON.match(/\{[\s\S]*\}/);

      if (!jsonMatch) {
        console.error("‚ùå No se encontr√≥ JSON en la respuesta");
        console.log("Respuesta recibida:", recipeJSON);
        throw new Error("Formato de respuesta no reconocido");
      }

      // Extraer el JSON de la respuesta (sea con delimitadores markdown o no)
      const jsonString = jsonMatch[1] || jsonMatch[0];
      const recipeData = JSON.parse(jsonString);
      console.log("‚úÖ Receta generada:", recipeData.title);

      // Convertir al formato de nuestra aplicaci√≥n
      return {
        id: generateId(),
        title: recipeData.title,
        ingredients: recipeData.ingredients || [],
        instructions: recipeData.instructions || [],
        prepTime: recipeData.prepTime || userInput.preferences.prepTime,
        difficultyLevel:
          recipeData.difficultyLevel || userInput.preferences.difficultyLevel,
        cuisineType: userInput.preferences.cuisineType,
        dietType: recipeData.dietType || userInput.preferences.dietType,
        createdAt: new Date().toISOString(),
        source: "deepseek", // DeepSeek a trav√©s de OpenRouter
      };
    } catch (parseError) {
      console.error("‚ùå Error al parsear respuesta JSON:", parseError);
      console.log("Respuesta recibida:", recipeJSON);
      throw new Error("Error al procesar la respuesta de la IA");
    }
  } catch (error) {
    console.error(
      "‚ùå Error al generar receta con DeepSeek a trav√©s de OpenRouter:",
      error
    );
    throw error; // Propagar el error para manejarlo en el nivel superior
  }
};
